
### ALL COMBINATIONS ###
# from the user's point of view - what he types when he executes :HelperSave [context]
# [context] is optional

# keyword doesn't exist, context doesn't exist                                             0 0
    # Do you want to specify a context?
        # abort [a]
        # yes -> create keyword with context   1
        # no -> create keyword with no context 0

# keyword doesn't exist, context exists                                                    0 1
    # context exists in db, do you want to create keyword with context?    1
        # yes -> create keyword with context [default yes]       1
        # no, user might have made a context spelling mistake    0
    # context doesn't exist in db, do you want to assign keyword def. to a context?  0
                            # yes, create keyword & context [yes]     1
                            # no, user might have made a context spelling mistake  0

# keyword exists, context doesn't                                                          1 0
    # with no context defined. Would the user want to create another context?
        # yes, then prompt for user to specify context       1
                     # update definition & context?  0
                     # keep the old def, but new context, definition pair? (a dict)  1
        # no, then update the existing definition, keep with no context.  0
    # with one context. Would the user want to create another context?
        # no [update keyword]
        # yes [Keep old definition and create a new definition with context]
            # context == prevctx?
                # yes, update keyword, keep context
                # no, Does user want to create a new def. with context?
                    # yes
                    # no, update def. & update context
    # with more contexts(more defs.)  # TODO display context and 3 lines from definition for each definition
    # keyword exists with more contexts(more definitions) ->
    # user chose which context to load, so the context should
    # be known & stored before this function is called. Would the user want to create another context?
        # yes, then prompt for user to specify context
                     # update definition & context?
                     # keep the old def, but new context, definition pair? (a dict)
        # no, then update the existing definition, keep with same context.

# keyword exists, context exists                                                           1 1
    # if more contexts, load one of them
    # context exists in db:
        # context == prevctx?
            # yes, then update keyword
            # no:
                # abort? [a]
                # keyword has no context. Update kewyword and assign a context?
                    # yes
                    # no, keep old definition and create a new def with this context
                # keyword has a context. Do you want to update just the keyword context?
                    # yes, update keyword and context
                    # no, keep old definition and create a new def with context
    # context doesn't exist in db:
        # abort [a]
        # keyword has no context. Update kewyword and assign a context?
            # yes
            # no, keep old definition and create a new def with this context
        # keyword has a context. Do you want to update just the keyword context?
            # yes, update keyword and context
            # no, keep old definition and create a new def with context

            #if keyword:
            #    # if keyword already defined in database, update it
            #    keyword = update_keyword_info(store, keyword, help_buffer)
            #else:
            #    # create a new keyword
            #    keyword = create_keyword(store, word, help_buffer)
